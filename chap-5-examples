vector<string> split(const string& s) {
  vector<string> ret;
  typedef string::size_type string_size;
  string_size i = 0;
  
  // 通过计算索引i，j对单词进行定位，每个单词是[i,j)之间的字符
  
  while（i != s.size()）{
    // find i: ignore leading blanks
    while (i != s.size() && isspace(s[i])){
      i++;
    }
    // find j: 
    string_size j = i;
    while (j != s.size() && ！isspace(s[j])) {
      j++
    }
    // if we found some nonwhitespace characters, copy them
    if (i != j) {
      ret.push_back(s.substr(i, j-i);
      i = j;
    }
  }
  return ret;
}




// 5.8 连接字符串

string::size_type width(const vector<string>& v) {
  string::size_type maxlen = 0;
  for (vector<string>::size_type i = 0; i != v.size(); i++) {
    maxlen = max(maxlen, v[i].size());
  }
  return maxlen;
}


vector<string> frame(const vector<string>& v) {
  vector<string> ret;
  
  // get border
  string::size_type maxlen = width(v);
  string border(maxlen+4, "*");
  
  // write the border
  ret.push_back(border);
  
  // write each interior row, bordered by an asterisk and a space
  for (vector<string>::size_type i = 0; i != v.size(); i++) {
    ret.push_back("* " + v[i] + string(maxlen-v[i].size(), ' ') + "* ");
  }
  
  // write the border
  ret.push_back(border);
  
  return ret;
}








