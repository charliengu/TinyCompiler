
/* 分割字符串的另一种方式 */

// true if the argument is whitespace, false otherwise
bool space(char c){
  return isspace(c);
}

// false if the argument is whitespace, true otherwise
bool not_space(char c){
  return !isspace(c);
}

vector<string> split(const string& str){
  typedef string::const_iterator iter;
  vector<string> ret;
  
  iter i = str.begin();
  while( i != str.end()) {
    // ignore leading blanks
    i = find_if(i, str.end(), not_space);
    // find end of next word
    iter j = find_if(i, str.end(), space);
    // copy the characters in [i,j)
    if (i != str.end())
      ret.push_back(string(i,j));
    i = j;
  }
  return ret;
}




/************ 
查找URL
每个URL的格式如下 protocol-name://resource-name
*************/

vecto<string> find_urls(const string& s){
  vector<string> ret;
  typedef string::const_iterator iter;
  iter b = s.begin();
  iter e = s.end();
  
  // look through the entire input
  while(b!=e) {
    // look for one or more letters followed by ://
    b = url_beg(b, e)
    // if we found it
    if(b != e) {
      // get the rest of the URL
      iter after = url_end();
      // remember the URL
      ret.push_back(string(b, after));
      // advance b and check for more URLs on this line
      b = after;
    }
  }
  return ret;
}


string::const_iterator 
url_begin(string::const_iterator b, string::const_iterator e) {

}


string::const_iterator
url_end(string::const_iterator b, string::const_iterator e) {
  
}













